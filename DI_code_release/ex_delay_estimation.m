% Channel Delay Estimation via Shifted Directed Information
% This example program successfully uses shifted directed information to estimate the
% delay of a channel with memory. 


close all;
clear all;
clc

%% Set the parameters 

D = 6; % The maximum depth of context tree is 6
Nx=2; % The size of alphabet is 2
extra = 10; % size of redundant data
n_data=10^4+extra; % generate primary data
p_t=0.3;  % cross-over probability of the clean data generated by a first-order binary Markov Process
o_t=0.1;  % cross-over probability from clean data to observation through a memoryless BSC
delay=2;  % The true value of delay 

%% Generate Data
transition=(rand(1,n_data)<p_t); % number of transitions 
data(1)=(rand(1,1)>0.5); % generate the first data piece
% generate the first-order Markov Process
for i=2:n_data
    data(i)=xor(data(i-1),transition(i)); 
end; 

% generate input X and output Y, both of length 'n_data-delay-1'
X_temp=data(2+delay:n_data);
Y_temp=xor(xor(data(2:n_data-delay),(rand(1,n_data-delay-1)<o_t)),data(1:n_data-delay-1));

%% Estimate the Delay

DI=[]; % Directed Information Initialization
MAX_DELAY=4; % Maximum Possible Delay
% Since we are familiar with I(X^n --> Y^n), but in delay estimation
% problem we need to estimate I(Y^{n+d} --> X^n), so we change the role of
% X and Y as follows, then we only need to compute I(X^n --> Y^n).

for i_delay=-MAX_DELAY:1:MAX_DELAY,
    disp(strcat(strcat('---possible delay ',num2str(i_delay)),' tested.'))
    if i_delay<0
        X=Y_temp(2:n_data-extra);
        Y=X_temp(-i_delay+2:-i_delay+n_data-extra);
    else
        X=Y_temp(i_delay+2:i_delay+n_data-extra);
        Y=X_temp(2:n_data-extra);
    end;
[B_MI, B_DI, B_inv_DI]=compute_DI_MI(X,Y,Nx,D,'E1',0,0,0);
DI=[DI B_DI(end)/length(B_DI)];
end;

figure;
plot([-MAX_DELAY:1:MAX_DELAY], DI,'x');
xlabel('d');
ylabel('Shifted Directed Information');
title('Estimation of Delay via Shifted Directed Information');



